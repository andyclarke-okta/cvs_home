
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "AuthCode Login";
}

<script src="https://global.oktacdn.com/okta-signin-widget/@Configuration["OktaWeb:WidgetVersion"]/js/okta-sign-in.min.js" type="text/javascript"></script>
<link href="https://global.oktacdn.com/okta-signin-widget/@Configuration["OktaWeb:WidgetVersion"]/css/okta-sign-in.min.css" type="text/css" rel="stylesheet" />



<div class="login-bg-image" style="background: url('../img/pfizer_relief.jpg')">

</div>

<div id="okta-login-container"></div>

<form method="POST" asp-action="ImplicitLanding">
    <input type="hidden" name="idToken" id="hiddenIdTokenField" />
    @Html.AntiForgeryToken()
</form>



<script type="text/javascript">


        var myOktaOrg = '@Configuration["OktaWeb:OktaDomain"]';
        var clientId = '@Configuration["OktaWeb:ClientId"]';
        var myIssuer = '@Configuration["OktaWeb:Authority"]';
        var redirectUri = '@Configuration["OktaWeb:RedirectUri"]';
        //var redirectUri = "@TempData["redirectUri"]";
      //var redirectUri = window.location.origin + '/authorization-code/callback';
        var myHrefLocation = "none";

        var landing = "/Home/UnprotectedLanding"

            // Handle GET / Querystring Params...
        function getParameterByName(name, url) {
            // Set default for url
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            // If not found
            if (!results) return null;
            // If no value found
            if (!results[2]) return '';
            // Result found... just decode 1st.
            console.log('name', results[2]);
            var parameter_decoded = decodeURIComponent(results[2]);
            console.log('parameter_decoded', parameter_decoded);
            return decodeURIComponent(parameter_decoded);
        }

        (function () {
            var url = window.location.href;
            var arr = url.split("/");
            var result = arr[0] + "//" + arr[2];
            myHrefLocation = result;
        })();


        // Handle the logic to prioritize the URL for redirect.
        function getOpt(o1, o2, o3) {
            // Set defaults for inbound
            if (o1 != null) return o1;
            if (o2 != null) return o2;
            if (o3 != null) return o3;
            return window.location.href;
        }

        //  Handle Return URLs
        //debugger;
        var relayState = getParameterByName('relaystate');
        if (relayState != null)
            console.log('relayState', relayState);

        var fromURI = getParameterByName('fromURI');
        if (fromURI != null)
            console.log('fromURI', fromURI);

        var MyInfo = getParameterByName('MyInfo');
        if (MyInfo != null)
            console.log('MyInfo', MyInfo);

        function getOpt() {
            //set hierarchy for choosing landing url
            var nextUrl = myLocation + landing;
            //var nextUrl = myOktaOrg;
            if (MyInfo != null) {
                nextUrl = MyInfo;
            }
            if (relayState != null) {
                nextUrl = relayState;
            }
            if (fromURI != null) {
                nextUrl = fromURI;
            }
            return nextUrl;
        }



         var options = {
            baseUrl: myOktaOrg,
            logo: "/img/Pfizer_logo.png",
            features: {
                registration: true,
                router: true,
                rememberMe: false,
                smsRecovery: true,
                callRecovery: true,
                windowsVerify: true,
                selfServiceUnlock: true,
                hideSignOutLinkInMFA: true,
                showPasswordToggleOnSignInPage: true,
                multiOptionalFactorEnroll: true,
                idpDiscovery: true
             },
             registration: {
                 parseSchema: function (schema, onSuccess, onFailure) {
                     // handle parseSchema callback
                     onSuccess(schema);
                 },
                 preSubmit: function (postData, onSuccess, onFailure) {
                     // handle preSubmit callback
                     console.log(postData);
                     onSuccess(postData);
                 },
                 postSubmit: function (response, onSuccess, onFailure) {
                     // handle postsubmit callback
                     console.log(response);
                     onSuccess(response);
                 }
             },
             authScheme: 'OAUTH2',
             clientId: clientId,
             //redirectUri defaults to window.location.origin
             redirectUri: redirectUri,
             authParams: {

                issuer: myIssuer,
                 oAuthTimeout: 30000,
                //response mode defaults to fragment when pkce
                responseMode: 'query',
                //response type defaults to code when pkce
                responseType: 'code',
                 //pkce default value is true
                pkce: false,
                 scope: ['openid', 'email', 'profile','groups','offline_access'],
             },
            i18n: {
                // Overriding English properties
                'en': {
                    'primaryauth.title': 'Sign in to Pfizer',
                    'primaryauth.username.placeholder': 'Your Pfizer Username'
                }
             },
                    // OIDC options
            //clientId: clientId,
            //redirectUri: redirectUri,

            helpLinks: {
                help: "/Home/Help"
             }
        };
        var oktaSignIn = new OktaSignIn(options);


                function showLoginWidget() {
                    oktaSignIn.renderEl(
                        { el: '#okta-login-container' },
                        function (res) {
                            debugger;
                            if (res.status === 'SUCCESS') {
                                console.log("login successful");
                                console.log(res);


                            }
                        },
                        // Failure callback (invoked if the authentication is unsuccessful
                        // or if there is a failure on authentication)
                        function (err) {
                            debugger;
                            // handleErrors(err);
                            console.log("failed to login: %o", err);
                        }
                    );
    }
                console.log("REDIRECT location; " + redirectUri);
                console.log("current location; " + window.location.origin);
                showLoginWidget();


            // // Check for an existing authClient transaction
            //var exists = oktaSignIn.authClient.tx.exists();
            //if (exists) {
            //  console.log('A session exists!');
            //} else {
            //  console.log('A session does not exist.');
            //};

            //debugger;

            //if (oktaSignIn.hasTokensInUrl()) {
            //  // The user has just successfully completed a redirect
            //    console.log("user has just successfully completed a redirect");
            //}
            //else {
            //  // There are no tokens in the URL, render the Sign-In Widget.

            //    showLoginWidget();
            //}


        console.log('oktaSignIn: ', oktaSignIn);
        console.log('Auth: ', myOktaOrg);




</script>
